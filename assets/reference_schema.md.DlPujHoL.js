import{_ as s,c as o,o as a,ae as r,j as t,a as e,t as n}from"./chunks/framework.Bi6zybwU.js";const y=JSON.parse('{"title":"Schema Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference/schema.md","filePath":"reference/schema.md"}'),i={name:"reference/schema.md"},u={tabindex:"0"};function p(l,d,c,h,m,g){return a(),o("div",null,[d[16]||(d[16]=r('<h1 id="schema-reference" tabindex="-1">Schema Reference <a class="header-anchor" href="#schema-reference" aria-label="Permalink to &quot;Schema Reference&quot;">​</a></h1><p>Exhaustive specification of the test file format.</p><h2 id="global-config" tabindex="-1">Global <code>[config]</code> <a class="header-anchor" href="#global-config" aria-label="Permalink to &quot;Global `[config]`&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Key</th><th>Type</th><th>Required</th><th>Notes</th></tr></thead><tbody><tr><td><code>base_url</code></td><td>string</td><td>yes</td><td>Base URL for all requests</td></tr><tr><td><code>default_headers</code></td><td>map&lt;string,string&gt;</td><td>no</td><td>Added to every request</td></tr><tr><td><code>insecure</code></td><td>bool</td><td>no</td><td>Accept invalid TLS certs</td></tr><tr><td><code>allowed_commands</code></td><td>array&lt;string&gt;</td><td>no</td><td>Whitelist for command hooks</td></tr></tbody></table><p>Environment variables can be interpolated in any string via <code>${{NAME}}</code>.</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">base_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">default_headers = { &quot;Content-Type&quot; = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">insecure = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allowed_commands = [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="tests-entries" tabindex="-1"><code>[[tests]]</code> entries <a class="header-anchor" href="#tests-entries" aria-label="Permalink to &quot;`[[tests]]` entries&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Key</th><th>Type</th><th>Required</th><th>Notes</th></tr></thead><tbody><tr><td><code>name</code></td><td>string</td><td>yes</td><td>Display name</td></tr><tr><td><code>method</code></td><td>string</td><td>yes</td><td>GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS</td></tr><tr><td><code>endpoint</code></td><td>string</td><td>yes</td><td>Appended to <code>base_url</code>; supports <code>{{vars}}</code></td></tr><tr><td><code>query_params</code></td><td>map&lt;string,string&gt;</td><td>no</td><td>Each value supports <code>{{vars}}</code> and <code>${{ENV}}</code></td></tr><tr><td><code>headers</code></td><td>map&lt;string,string&gt;</td><td>no</td><td>Per-test headers</td></tr><tr><td><code>body</code></td><td>JSON value</td><td>no</td><td>Inline JSON; strings support <code>{{vars}}</code> and <code>{{file:path}}</code></td></tr><tr><td><code>body_file</code></td><td>string (relative path)</td><td>no</td><td>Load body from file; <code>.json</code> parsed as JSON</td></tr><tr><td><code>expected_status</code></td><td>number</td><td>yes</td><td>HTTP status code</td></tr><tr><td><code>expected_body</code></td><td>JSON value</td><td>no</td><td>Exact match; use <code>assertions</code> for flexible checks</td></tr><tr><td><code>assertions</code></td><td><code>array&amp;lt;Assertion&amp;gt;</code></td><td>no</td><td>See Assertions Reference</td></tr><tr><td><code>store</code></td><td>map&lt;string,string&gt;</td><td>no</td><td>JSONPath (like <code>$.id</code>) → variable name</td></tr><tr><td><code>get_cookie</code></td><td>map&lt;string,string&gt;</td><td>no</td><td>Cookie name → variable name</td></tr><tr><td><code>max_response_time</code></td><td>number (ms)</td><td>no</td><td>Fails if exceeded</td></tr><tr><td><code>before</code></td><td><code>array&amp;lt;CommandStep&amp;gt;</code></td><td>no</td><td>Run before HTTP call</td></tr><tr><td><code>after</code></td><td><code>array&amp;lt;CommandStep&amp;gt;</code></td><td>no</td><td>Run after; supports <code>on</code> condition</td></tr></tbody></table><p>Mutual exclusivity: <code>body</code> and <code>body_file</code> cannot be used together.</p><h3 id="commandstep" tabindex="-1">CommandStep <a class="header-anchor" href="#commandstep" aria-label="Permalink to &quot;CommandStep&quot;">​</a></h3>',10)),t("table",u,[d[15]||(d[15]=t("thead",null,[t("tr",null,[t("th",null,"Key"),t("th",null,"Type"),t("th",null,"Required"),t("th",null,"Notes")])],-1)),t("tbody",null,[d[5]||(d[5]=t("tr",null,[t("td",null,[t("code",null,"run")]),t("td",null,"string"),t("td",null,"yes"),t("td",null,"Command binary or script")],-1)),d[6]||(d[6]=t("tr",null,[t("td",null,[t("code",null,"args")]),t("td",null,"array<string>"),t("td",null,"no"),t("td",null,"Arguments array")],-1)),d[7]||(d[7]=t("tr",null,[t("td",null,[t("code",null,"shell")]),t("td",null,"bool"),t("td",null,"no"),t("td",null,[e("Run via shell ("),t("code",null,"sh -lc"),e(")")])],-1)),d[8]||(d[8]=t("tr",null,[t("td",null,[t("code",null,"dir")]),t("td",null,"string"),t("td",null,"no"),t("td",null,"Working directory")],-1)),d[9]||(d[9]=t("tr",null,[t("td",null,[t("code",null,"env")]),t("td",null,"map<string,string>"),t("td",null,"no"),t("td",null,"Step environment variables")],-1)),d[10]||(d[10]=t("tr",null,[t("td",null,[t("code",null,"timeout_ms")]),t("td",null,"number"),t("td",null,"no"),t("td",null,"Default 30000")],-1)),d[11]||(d[11]=t("tr",null,[t("td",null,[t("code",null,"ignore_error")]),t("td",null,"bool"),t("td",null,"no"),t("td",null,"Don’t fail on non-zero exit")],-1)),t("tr",null,[d[2]||(d[2]=t("td",null,[t("code",null,"capture")],-1)),d[3]||(d[3]=t("td",null,[t("code",null,"{ var: string }")],-1)),d[4]||(d[4]=t("td",null,"no",-1)),t("td",null,[d[0]||(d[0]=e("Save stdout→",-1)),t("code",null,n(l.var),1),d[1]||(d[1]=e(", stderr→",-1)),t("code",null,n(l.var)+"_stderr",1)])]),d[12]||(d[12]=t("tr",null,[t("td",null,[t("code",null,"export")]),t("td",null,"map<string,string>"),t("td",null,"no"),t("td",null,"JSONPath from stdout → variable")],-1)),d[13]||(d[13]=t("tr",null,[t("td",null,[t("code",null,"when")]),t("td",null,"string"),t("td",null,"no"),t("td",null,[e("Simple "),t("code",null,"=="),e("/"),t("code",null,"!="),e(" condition after substitution")])],-1)),d[14]||(d[14]=t("tr",null,[t("td",null,[t("code",null,"on")]),t("td",null,"string"),t("td",null,"no"),t("td",null,[e("Only for "),t("code",null,"after"),e(": "),t("code",null,"success"),e("/"),t("code",null,"failure"),e("/"),t("code",null,"always")])],-1))])]),d[17]||(d[17]=t("p",null,[e("Security: every step is validated against "),t("code",null,"[config].allowed_commands"),e(".")],-1))])}const E=s(i,[["render",p]]);export{y as __pageData,E as default};
