import{_ as n,c as l,o as p,ae as t,j as a,a as e,t as o}from"./chunks/framework.Bi6zybwU.js";const b=JSON.parse('{"title":"Running Tests","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started/running_tests.md","filePath":"getting-started/running_tests.md"}'),r={name:"getting-started/running_tests.md"};function h(i,s,d,c,u,g){return p(),l("div",null,[s[4]||(s[4]=t('<h1 id="running-tests" tabindex="-1">Running Tests <a class="header-anchor" href="#running-tests" aria-label="Permalink to &quot;Running Tests&quot;">​</a></h1><p>Once you&#39;ve created your test configuration file, you can run your tests using the Catalyst command-line interface. This guide explains how to run tests and interpret the results.</p><h2 id="basic-test-execution" tabindex="-1">Basic Test Execution <a class="header-anchor" href="#basic-test-execution" aria-label="Permalink to &quot;Basic Test Execution&quot;">​</a></h2><p>To run all tests defined in your <code>.catalyst/tests.toml</code> file, navigate to your project directory and run:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span></span></code></pre></div><p>This will execute all tests in the order they are defined in the file.</p><h2 id="cli-options" tabindex="-1">CLI Options <a class="header-anchor" href="#cli-options" aria-label="Permalink to &quot;CLI Options&quot;">​</a></h2><p>Catalyst provides several command-line options to customize test execution:</p><h3 id="specifying-a-custom-test-file" tabindex="-1">Specifying a Custom Test File <a class="header-anchor" href="#specifying-a-custom-test-file" aria-label="Permalink to &quot;Specifying a Custom Test File&quot;">​</a></h3><p>By default, Catalyst looks for tests in <code>.catalyst/tests.toml</code> in your current directory. You can specify a different file using the <code>--file</code> option:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/custom/tests.toml</span></span></code></pre></div><h3 id="filtering-tests" tabindex="-1">Filtering Tests <a class="header-anchor" href="#filtering-tests" aria-label="Permalink to &quot;Filtering Tests&quot;">​</a></h3><p>You can run specific tests by using the <code>--filter</code> option:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Login&quot;</span></span></code></pre></div><p>This will only run tests whose names contain the string &quot;Login&quot;.</p><h3 id="verbose-output" tabindex="-1">Verbose Output <a class="header-anchor" href="#verbose-output" aria-label="Permalink to &quot;Verbose Output&quot;">​</a></h3><p>For more detailed output, use the <code>--verbose</code> (or <code>-v</code>) flag:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --verbose</span></span></code></pre></div><p>This will show additional information such as response bodies and headers.</p><h3 id="debug-logs" tabindex="-1">Debug Logs <a class="header-anchor" href="#debug-logs" aria-label="Permalink to &quot;Debug Logs&quot;">​</a></h3><p>To print detailed internal logs (variable substitution, hooks, env loading), use <code>--debug</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --debug</span></span></code></pre></div><h3 id="disabling-colored-output" tabindex="-1">Disabling Colored Output <a class="header-anchor" href="#disabling-colored-output" aria-label="Permalink to &quot;Disabling Colored Output&quot;">​</a></h3><p>If you&#39;re running tests in an environment that doesn&#39;t support colored output, you can disable it:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --disable-color</span></span></code></pre></div><h3 id="setting-variables-from-cli" tabindex="-1">Setting Variables from CLI <a class="header-anchor" href="#setting-variables-from-cli" aria-label="Permalink to &quot;Setting Variables from CLI&quot;">​</a></h3><p>You can pass variables directly from the command line using the <code>--var</code> option. This is useful for setting environment-specific values or dynamic test data:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user_id=123,api_token=secret_key</span></span></code></pre></div>',28)),a("p",null,[s[0]||(s[0]=e("Variables are specified in ",-1)),s[1]||(s[1]=a("code",null,"key=value",-1)),s[2]||(s[2]=e(" format and multiple variables are separated by commas. These variables can then be used in your test files using the ",-1)),a("code",null,o(i.variable),1),s[3]||(s[3]=e(" syntax:",-1))]),s[5]||(s[5]=t(`<div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Get User&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endpoint = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users/{{user_id}}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers = { &quot;Authorization&quot; = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bearer {{api_token}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expected_status = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span></span></code></pre></div><p>CLI variables work with both complex values and special characters:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base_url=https://api.example.com,timeout=30,debug=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h3 id="complete-cli-reference" tabindex="-1">Complete CLI Reference <a class="header-anchor" href="#complete-cli-reference" aria-label="Permalink to &quot;Complete CLI Reference&quot;">​</a></h3><p>Here&#39;s a complete list of available commands and options:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CATALYST COMMANDS:</span></span>
<span class="line"><span>  run       Run API tests</span></span>
<span class="line"><span>    Options:</span></span>
<span class="line"><span>      -f, --filter &lt;FILTER&gt;    Filter by test name</span></span>
<span class="line"><span>      --disable-color          Disable colored output</span></span>
<span class="line"><span>      -v, --verbose            Enable verbose output</span></span>
<span class="line"><span>      --file &lt;FILE&gt;            Specify a custom test file path</span></span>
<span class="line"><span>      --var &lt;VAR&gt;              Set variables in key=value format (comma-separated)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  validate  Validate tests configuration</span></span>
<span class="line"><span>    Options:</span></span>
<span class="line"><span>      --file &lt;FILE&gt;            Specify a custom test file path</span></span>
<span class="line"><span>      --var &lt;VAR&gt;              Set variables in key=value format (comma-separated)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  list      List available tests</span></span>
<span class="line"><span>    Options:</span></span>
<span class="line"><span>      -v, --verbose            Enable detailed test information</span></span>
<span class="line"><span>      --file &lt;FILE&gt;            Specify a custom test file path</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  help      Print this message or the help of the given subcommand(s)</span></span></code></pre></div><h2 id="understanding-test-results" tabindex="-1">Understanding Test Results <a class="header-anchor" href="#understanding-test-results" aria-label="Permalink to &quot;Understanding Test Results&quot;">​</a></h2><p>Catalyst provides clear feedback about test execution:</p><ul><li><strong>[PASS]</strong> - The test succeeded (actual status code matches expected status code)</li><li><strong>[FAIL]</strong> - The test failed (actual status code differs from expected status code)</li></ul><p>At the end of the test run, Catalyst will display a summary showing the total number of tests, how many passed, and how many failed.</p><h2 id="example-output" tabindex="-1">Example Output <a class="header-anchor" href="#example-output" aria-label="Permalink to &quot;Example Output&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Running API tests...</span></span>
<span class="line"><span>[PASS] Simple GET Request      (200 Success)</span></span>
<span class="line"><span>[PASS] Create User             (201 Success)</span></span>
<span class="line"><span>[FAIL] Update User             (404 Not Found) (expected 200)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Failed tests:</span></span>
<span class="line"><span>- Update User</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Test Summary:</span></span>
<span class="line"><span>Total: 3, Passed: 2, Failed: 1</span></span></code></pre></div><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Now that you know how to run tests, explore the <a href="./../reference/schema">Schema Reference</a> for all available options.</p>`,14))])}const m=n(r,[["render",h]]);export{b as __pageData,m as default};
