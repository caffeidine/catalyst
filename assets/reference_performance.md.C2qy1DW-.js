import{_ as s,c as a,o as t,ae as r}from"./chunks/framework.Bi6zybwU.js";const d=JSON.parse('{"title":"Performance Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference/performance.md","filePath":"reference/performance.md"}'),i={name:"reference/performance.md"};function n(o,e,p,l,c,m){return t(),a("div",null,[...e[0]||(e[0]=[r('<h1 id="performance-reference" tabindex="-1">Performance Reference <a class="header-anchor" href="#performance-reference" aria-label="Permalink to &quot;Performance Reference&quot;">​</a></h1><p>Enforce response latency and reuse timings in later tests.</p><h2 id="max-response-time" tabindex="-1">max_response_time <a class="header-anchor" href="#max-response-time" aria-label="Permalink to &quot;max_response_time&quot;">​</a></h2><p>Fail a test if it exceeds the threshold (ms):</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">max_response_time = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span></span></code></pre></div><h2 id="response-time-ms-variable" tabindex="-1">response_time_ms variable <a class="header-anchor" href="#response-time-ms-variable" aria-label="Permalink to &quot;response_time_ms variable&quot;">​</a></h2><p>After each test, Catalyst sets <code>response_time_ms</code> which can be used in subsequent requests or logs:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body = { &quot;prev_ms&quot; = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{response_time_ms}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div>',8)])])}const _=s(i,[["render",n]]);export{d as __pageData,_ as default};
