import{_ as e,c as i,o as a,ae as t}from"./chunks/framework.Bi6zybwU.js";const k=JSON.parse('{"title":"CLI Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference/cli.md","filePath":"reference/cli.md"}'),l={name:"reference/cli.md"};function n(o,s,d,c,r,h){return a(),i("div",null,[...s[0]||(s[0]=[t(`<h1 id="cli-reference" tabindex="-1">CLI Reference <a class="header-anchor" href="#cli-reference" aria-label="Permalink to &quot;CLI Reference&quot;">​</a></h1><p>Use <code>catalyst help</code> or <code>catalyst &lt;command&gt; --help</code> to see flags.</p><h2 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;Commands&quot;">​</a></h2><ul><li><p><code>run</code>: Execute tests</p><ul><li><code>-f, --filter &lt;FILTER&gt;</code>: Run tests with names containing this string</li><li><code>--file &lt;FILE&gt;</code>: Use a specific test file (defaults to <code>.catalyst/tests.toml</code>)</li><li><code>--var &lt;VAR&gt;</code>: Set variables as <code>key=value</code> pairs (comma-separated)</li><li><code>-v, --verbose</code>: Show detailed output</li><li><code>--disable-color</code>: Disable colored output</li><li><code>-d, --debug</code>: Print debug logs (variable substitution, hooks, env)</li></ul></li><li><p><code>validate</code>: Validate tests configuration</p><ul><li><code>--file &lt;FILE&gt;</code>: Use a specific test file</li><li><code>--var &lt;VAR&gt;</code>: Set variables as <code>key=value</code> pairs (comma-separated)</li></ul></li><li><p><code>list</code>: List available tests</p><ul><li><code>-v, --verbose</code>: Show detailed information</li><li><code>--file &lt;FILE&gt;</code>: Use a specific test file</li></ul></li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --verbose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .catalyst/staging.toml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Login&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> token=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TOKEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,base_url=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BASE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> validate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .catalyst/tests.toml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catalyst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><p>See also: <a href="./../getting-started/running_tests">Run and Filter Tests</a></p>`,7)])])}const F=e(l,[["render",n]]);export{k as __pageData,F as default};
