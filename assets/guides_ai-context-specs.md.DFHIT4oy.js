import{_ as a,c as e,o as n,ae as i}from"./chunks/framework.Bi6zybwU.js";const k=JSON.parse('{"title":"AI Context Specs (for LLMs)","description":"","frontmatter":{},"headers":[],"relativePath":"guides/ai-context-specs.md","filePath":"guides/ai-context-specs.md"}'),t={name:"guides/ai-context-specs.md"};function p(l,s,o,h,r,d){return n(),e("div",null,[...s[0]||(s[0]=[i(`<h1 id="ai-context-specs-for-llms" tabindex="-1">AI Context Specs (for LLMs) <a class="header-anchor" href="#ai-context-specs-for-llms" aria-label="Permalink to &quot;AI Context Specs (for LLMs)&quot;">​</a></h1><p>Help large language models (LLMs) reliably generate high‑quality Catalyst tests by giving them a consistent, compact context. This page provides what to include, a copy‑paste prompt template, and tips to improve results.</p><h2 id="what-to-include" tabindex="-1">What to include <a class="header-anchor" href="#what-to-include" aria-label="Permalink to &quot;What to include&quot;">​</a></h2><ul><li>Base URL: the API root all endpoints use.</li><li>Target endpoints: methods, paths, and brief intent for each test you want.</li><li>Auth model: headers, tokens, cookies, or steps to obtain them.</li><li>Required headers: defaults and per‑request overrides.</li><li>Data and fixtures: example payloads or files, and how to create/delete them.</li><li>Assertions: what must be validated (status, fields, shapes, JSONPath checks).</li><li>Variables and chaining: values to capture and reuse between tests.</li><li>Hooks: commands to run before/after tests (whitelist in allowed_commands).</li><li>Performance budgets: <code>max_response_time</code> if relevant.</li><li>Output rules: where files should go and any naming conventions.</li></ul><p>Link the model to reference pages when possible for accuracy:</p><ul><li>Schema → ../reference/schema.md</li><li>Assertions → ../reference/assertions.md</li><li>Variables → ./variables-chaining.md</li><li>Hooks → ./hooks.md</li><li>Request bodies → ../reference/file-bodies.md</li></ul><h2 id="prompt-template" tabindex="-1">Prompt template <a class="header-anchor" href="#prompt-template" aria-label="Permalink to &quot;Prompt template&quot;">​</a></h2><p>Copy, adjust, and paste this into your AI chat. Replace ALL_CAPS placeholders.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>You are generating Catalyst API tests in TOML.</span></span>
<span class="line"><span>Follow the Schema and features from: https://caffeidine.github.io/catalyst/reference/schema</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Project Context</span></span>
<span class="line"><span>- Base URL: BASE_URL</span></span>
<span class="line"><span>- Default headers (optional): DEFAULT_HEADERS_JSON</span></span>
<span class="line"><span>- Auth: describe how to authenticate (e.g., static bearer, cookie, OAuth step).</span></span>
<span class="line"><span>- Allowed commands (for hooks): [&quot;bash&quot;, &quot;sh&quot;, &quot;echo&quot;, &quot;jq&quot;] (edit as needed)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Targets (what to test)</span></span>
<span class="line"><span>- Brief list of endpoints with intent. Example:</span></span>
<span class="line"><span>  - GET /users/{id} → fetch existing user</span></span>
<span class="line"><span>  - POST /users → create user</span></span>
<span class="line"><span>  - DELETE /users/{id} → remove user</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Data &amp; Fixtures</span></span>
<span class="line"><span>- Provide any static example payloads or file paths the tests can use.</span></span>
<span class="line"><span>- Note any setup/teardown required to seed/clean data.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Assertions &amp; Performance</span></span>
<span class="line"><span>- Required checks (status codes, fields, shapes)</span></span>
<span class="line"><span>- Optional max_response_time (ms): e.g., 800</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Variables &amp; Chaining</span></span>
<span class="line"><span>- Which values to capture and reuse across tests (e.g., user id via $.id)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Output Expectations</span></span>
<span class="line"><span>- Produce a single TOML file named: OUTPUT_PATH (e.g., tests/users-smoke.toml)</span></span>
<span class="line"><span>- Only output a TOML code block, no commentary.</span></span>
<span class="line"><span>- Use these features as needed: \`store\`, \`get_cookie\`, \`assertions\`, \`before\`/\`after\`, \`body_file\`.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Example Capabilities Reminder</span></span>
<span class="line"><span>- Body can be inline JSON (\`body = { ... }\`) or \`body_file = &quot;path.json&quot;\`.</span></span>
<span class="line"><span>- Interpolate env vars: \${{NAME}}</span></span>
<span class="line"><span>- Extract with JSONPath: \`store = { id = &quot;$.id&quot; }\`</span></span>
<span class="line"><span>- Add performance budget: \`max_response_time = 800\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Now generate the TOML file.</span></span></code></pre></div><h2 id="minimal-example" tabindex="-1">Minimal example <a class="header-anchor" href="#minimal-example" aria-label="Permalink to &quot;Minimal example&quot;">​</a></h2><p>Input prompt (to the AI):</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Base URL: https://api.example.com</span></span>
<span class="line"><span>Auth: Bearer token from env var API_TOKEN</span></span>
<span class="line"><span>Targets:</span></span>
<span class="line"><span>- POST /users → create user</span></span>
<span class="line"><span>- GET /users/{id} → verify created user</span></span>
<span class="line"><span>Assertions: status codes; \`GET\` body contains { id, email }</span></span>
<span class="line"><span>Output file: tests/users-smoke.toml</span></span></code></pre></div><p>Expected output (from the AI):</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">base_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">default_headers = { &quot;Content-Type&quot; = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, &quot;Authorization&quot; = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bearer \${{API_TOKEN}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allowed_commands = [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Create user&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endpoint = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body = { email = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expected_status = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">201</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store = { user_id = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$.id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">max_response_time = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Get user&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endpoint = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/users/{{user_id}}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expected_status = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Contains&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value = { id = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{user_id}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h2 id="tips-for-better-results" tabindex="-1">Tips for better results <a class="header-anchor" href="#tips-for-better-results" aria-label="Permalink to &quot;Tips for better results&quot;">​</a></h2><ul><li>Be explicit: give concrete payloads, example responses, and field names.</li><li>State invariants: what must always be true (status, shapes, keys, ranges).</li><li>Guide naming: suggest test names and output file path.</li><li>Prefer JSONPath: use <code>store</code> to capture ids or tokens for later steps.</li><li>Keep secrets out of prompts: pass tokens via env vars and reference them.</li><li>Use hooks sparingly: only when necessary, and whitelist in <code>allowed_commands</code>.</li></ul><h2 id="running-the-generated-tests" tabindex="-1">Running the generated tests <a class="header-anchor" href="#running-the-generated-tests" aria-label="Permalink to &quot;Running the generated tests&quot;">​</a></h2><ul><li>Save the AI’s TOML output to your repo, e.g., <code>tests/users-smoke.toml</code>.</li><li>Run: <code>catalyst run tests/users-smoke.toml</code></li><li>Or run a whole folder: <code>catalyst run tests/</code></li></ul><p>Next</p><ul><li>Writing Tests → ./writing-tests.md</li><li>Variables &amp; Chaining → ./variables-chaining.md</li><li>Assertions → ../reference/assertions.md</li><li>Hooks → ./hooks.md</li><li>Schema → ../reference/schema.md</li></ul>`,20)])])}const u=a(t,[["render",p]]);export{k as __pageData,u as default};
