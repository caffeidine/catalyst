import{_ as t,c as a,o as i,ae as r}from"./chunks/framework.Bi6zybwU.js";const p=JSON.parse('{"title":"Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"explanation/architecture.md","filePath":"explanation/architecture.md"}'),o={name:"explanation/architecture.md"};function s(l,e,n,c,d,u){return i(),a("div",null,[...e[0]||(e[0]=[r('<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><p>High-level overview for contributors and power users.</p><h2 id="components" tabindex="-1">Components <a class="header-anchor" href="#components" aria-label="Permalink to &quot;Components&quot;">​</a></h2><ul><li>CLI: Parses args, loads config, orchestrates execution and reporting.</li><li>Loader: Reads TOML, merges <code>[config]</code> defaults with per-test overrides.</li><li>Executor: Issues HTTP requests, manages cookies, tracks response times.</li><li>Validator: Applies <code>expected_status</code>, <code>expected_body</code>, and <code>assertions</code>.</li><li>Store: Extracts and persists variables (JSON paths, cookies) across tests.</li></ul><h2 id="data-flow" tabindex="-1">Data flow <a class="header-anchor" href="#data-flow" aria-label="Permalink to &quot;Data flow&quot;">​</a></h2><ol><li>CLI resolves test file and CLI <code>--var</code> overrides.</li><li>Config is parsed and validated (syntax + semantics).</li><li>Tests execute sequentially; variables and cookies accumulate.</li><li>Results aggregate into a summary; failures are reported with context.</li></ol><h2 id="extensibility" tabindex="-1">Extensibility <a class="header-anchor" href="#extensibility" aria-label="Permalink to &quot;Extensibility&quot;">​</a></h2><ul><li>New assertion types can be added in the Validator.</li><li>Additional loaders (e.g., multiple files) can wrap the Loader.</li><li>Output formats (e.g., JUnit) can extend reporting without changing tests.</li></ul><p>See the source under <code>src/</code> for implementation details.</p>',9)])])}const m=t(o,[["render",s]]);export{p as __pageData,m as default};
