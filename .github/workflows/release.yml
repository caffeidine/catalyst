name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (for musl target)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Get binary name from Cargo.toml
        id: binary_name
        shell: bash
        run: |
          BINARY_NAME=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
          echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT

      - name: Create archive
        shell: bash
        run: |
          BINARY_NAME="${{ steps.binary_name.outputs.binary_name }}"
          ARCHIVE_NAME="${BINARY_NAME}-${{ matrix.target }}"

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.target }}/release/${BINARY_NAME}.exe" "${BINARY_NAME}.exe"
            7z a "${ARCHIVE_NAME}.zip" "${BINARY_NAME}.exe"
            echo "ASSET=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/${BINARY_NAME}" "${BINARY_NAME}"
            tar czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
            echo "ASSET=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ASSET }}
          path: ${{ env.ASSET }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
